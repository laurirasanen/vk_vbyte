/*
* Modified implementation of VByte decompression.
*/

#version 450

layout(binding = 0) buffer Data
{
	uint values[];
};

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (constant_id = 0) const uint BUFFER_ELEMENTS = 32;

uint uncompress(uint value)
{
	if (value >= (1u << 21))
	{
		// Only compressed if 3 or less bytes,
		// and 3rd byte < 128.
		return value;
	}

	uint b0 = (value >> (0 << 3)) & 0xFF;
	uint value_out = b0 & 0x7Fu;

	if (b0 < 128) 
	{
		return value_out;
	}
	
	uint b1 = (value >> (1 << 3)) & 0xFF;
	value_out = ((b1 & 0x7Fu) << 7) | value_out;
	
	if (b1 < 128)
	{
		return value_out;
	}

	uint b2 = (value >> (2 << 3)) & 0xFF;
	value_out = ((b2 & 0x7Fu) << 14) | value_out;

	if (b2 < 128)
	{
		return value_out;
	}

	// Should never get here
	return value;
}

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if (index >= BUFFER_ELEMENTS)
		return;
	values[index] = uncompress(values[index]);
}